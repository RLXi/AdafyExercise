@page "/matchessdf"

@using AdafyExercise.Data
@inject MatchesListingService MatchesService

<div class="has-text-white">
    <h1 class="is-size-1">Ottelut</h1>
</div>

@if (getMatchesError) {
<article class="message is-danger">
    <div class="message-header"><p>Warning</p></div>
    <div class="message-body">
        <p>Unable to get matches from API. Please try again later.</p>
    </div>
</article>
}
else {
        <div class="field">
            <p class="control has-icons-left has-icons-right">
                <input type="text" class="input" name="filter" id="filterMatch" @bind-value="filterString" @bind-value:event="oninput" placeholder="Suodata otteluita joukkueiden mukaan"/>
                <span class="icon is-small is-left">
                    <i class="oi oi-magnifying-glass"></i>
                </span>
            </p>
        </div>
    <div class="columns">
        <div class="column">
            <table class="table is-striped is-hoverable is-narrow is-fullwidth is-semitransparent">
                <thead>
                    <tr>
                        <th>Päivämäärä</th>
                        <th class="has-text-centered">Joukkueet</th>
                        <th class="has-text-centered">Tulos</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var match in matchesList) {
                        <tr>
                            <td>@match.MatchDate.ToString("dd/MM/yyyy")</td>
                            <td class="has-text-centered is-size-5">@match.HomeTeam.Name - @match.AwayTeam.Name</td>
                            <td class="has-text-centered is-size-5">@match.HomeGoals - @match.AwayGoals</td>
                            <td><a href="/matches/@match.Id" class="button is-link float-right">Ottelun tiedot</a></td>
                        </tr>
                    }
                </tbody>
                <tfoot></tfoot>
            </table>
        </div>
    </div>
}

@code {
    private IEnumerable<MatchesListing> matches = Array.Empty<MatchesListing>();
    private IEnumerable<MatchesListing> matchesList = Array.Empty<MatchesListing>();
    private bool getMatchesError;
    private bool shouldRender;
    private string filterString = "";

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync() {
        matchesList = await MatchesService.FetchData();
        if (matchesList.Count() != 0) {
            matchesList = matchesList.Where(x => x.HomeTeam.Name.ToLower().Contains(filterString) || x.AwayTeam.Name.ToLower().Contains(filterString));
        }
        else {
            getMatchesError = true;
        }
        shouldRender = true;
    }
}