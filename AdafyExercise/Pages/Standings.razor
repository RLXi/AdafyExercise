@page "/standings"

@using AdafyExercise.Data
@inject MatchesListingService MatchesService

<div class="has-text-white">
    <h1 class="is-size-1">Joukkuetilastot</h1>
</div>
@if (getError) {
    <article class="message is-danger">
        <div class="message-header"><p>Warning</p></div>
        <div class="message-body">
            <p>Unable to get matches from API. Please try again later.</p>
        </div>
    </article>
}
else {
    <table class="table is-striped is-semitransparent is-fullwidth has-text-centered has-text-black">
        <thead>
            <tr>
                <th>#</th>
                <th class="has-text-left">Joukkue</th>
                <th><abbr title="Ottelut">O</abbr></th>
                <th><abbr title="Voitot">V</abbr></th>
                <th><abbr title="Tasapelit">T</abbr></th>
                <th><abbr title="Häviöt">H</abbr></th>
                <th><abbr title="Tehdy maalit">TM</abbr></th>
                <th><abbr title="Päästety maalit">PM</abbr></th>
                <th><abbr title="Maaliero">ME</abbr></th>
                <th><abbr title="Pisteet">P</abbr></th>
            </tr>
        </thead>
        <tbody>
            @foreach (StandingsData stand in standingsList) {
                <tr>
                    <td>@stand.TeamRanking</td>
                    <td class="has-text-left is-size-5">@stand.TeamName</td>
                    <td>@stand.GamesPlayed</td>
                    <td>@stand.Wins</td>
                    <td>@stand.Ties</td>
                    <td>@stand.Losses</td>
                    <td>@stand.GoalsScored</td>
                    <td>@stand.GoalsAgainst</td>
                    <td>@stand.GoalDifference</td>
                    <td>@stand.Points</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private IEnumerable<MatchesListing> matches = Array.Empty<MatchesListing>();
    private bool getError;
    private bool shouldRender;
    private List<StandingsData> standingsList = new List<StandingsData>();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync() {
        
        matches = await MatchesService.FetchData();

        // Maybe this could have been placed in a service
        if (matches.Count() != 0) {
            foreach (MatchesListing match in matches) {
                // Add bare standings data for teams
                if (!standingsList.Any(p => p.TeamId == match.HomeTeam.Id)) {
                    standingsList.Add(CreateStandingData(match, match.HomeTeam));
                }
                if (!standingsList.Any(p => p.TeamId == match.AwayTeam.Id)) {
                    standingsList.Add(CreateStandingData(match, match.AwayTeam));
                }

                // Update standings data
                int homeTeamIndex = standingsList.FindIndex(p => p.TeamId == match.HomeTeam.Id);
                int awayTeamIndex = standingsList.FindIndex(p => p.TeamId == match.AwayTeam.Id);
                UpdateStandingData(match, match.HomeTeam, standingsList[homeTeamIndex]);
                UpdateStandingData(match, match.AwayTeam, standingsList[awayTeamIndex], false);
            }

            // The match data didn't produce situation, where two teams have equal amount of points.
            // In order to test GD (without writing proper tests), we can improvise a bit.
            //int someTeamIndex = standingsList.FindIndex(p => p.TeamName == "HJK");
            //standingsList[someTeamIndex].Points = 59;

            // Sort by points in descending order
            standingsList.Sort((x, y) => {
                if (x.Points == y.Points) {
                    return (x.GoalDifference > y.GoalDifference) ? -1 : 1;
                }
                else if (x.Points > y.Points) return -1;
                return 1;
            });

            // Update ranking based on order
            for (int i = 0; i < standingsList.Count(); i++) {
                // Gives team the same rank, if both points and GD are equal
                if (i != 0
                    && standingsList[i].Points == standingsList[i-1].Points
                    && standingsList[i].GoalDifference == standingsList[i - 1].GoalDifference) {
                    standingsList[i].TeamRanking = i;
                    continue;
                }
                standingsList[i].TeamRanking = i + 1;
            }
        }
        else {
            getError = true;
        }

        shouldRender = true;
    }
    
    private StandingsData CreateStandingData(MatchesListing match, Team team) {
        StandingsData newStanding = new StandingsData {
            TeamId = team.Id,
            TeamRanking = 0,
            TeamName = team.Name,
            GoalsScored = 0,
            GoalsAgainst = 0,
            GoalDifference = 0,
            Wins = 0,
            Ties = 0,
            Losses = 0,
            Points = 0,
            GamesPlayed = 0
        };

        return newStanding;
    }

    private void UpdateStandingData(MatchesListing match, Team team, StandingsData data, bool isHome = true) {
        data.GoalsScored = (isHome) ? data.GoalsScored + match.HomeGoals : data.GoalsScored + match.AwayGoals;
        data.GoalsAgainst = (isHome) ? data.GoalsAgainst + match.AwayGoals : data.GoalsAgainst + match.HomeGoals;
        data.GoalDifference = data.GoalsScored - data.GoalsAgainst;
        data.GamesPlayed = data.GamesPlayed += 1;

        if (isHome) {
            data.Wins = (match.HomeGoals > match.AwayGoals) ? data.Wins += 1 : data.Wins;
            data.Ties = (match.HomeGoals == match.AwayGoals) ? data.Ties += 1 : data.Ties;
            data.Losses = (match.HomeGoals < match.AwayGoals) ? data.Losses += 1 : data.Losses;
        }
        else {
            data.Wins = (match.AwayGoals > match.HomeGoals) ? data.Wins += 1 : data.Wins;
            data.Ties = (match.AwayGoals == match.HomeGoals) ? data.Ties += 1 : data.Ties;
            data.Losses = (match.AwayGoals < match.HomeGoals) ? data.Losses += 1 : data.Losses;
        }

        data.Points = data.Wins * 3 + data.Ties;
    }
}