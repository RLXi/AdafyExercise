@page "/matches/{matchid:int}"

@using AdafyExercise.Data
@inject MatchesListingService MatchesService

<div class="has-text-white">
    <h1 class="is-size-1">Ottelutunnus: @matchId</h1>
</div>

@if (getMatchError || matchDetails == null) {
<article class="message is-danger">
    <div class="message-header"><p>Warning</p></div>
    <div class="message-body">
        <p>Unable to get matches from API. Please try again later.</p>
    </div>
</article>
}
else {
<div>
    <div class="is-flex is-flex-direction-row is-justify-content-space-between">
        <TeamCard team="@matchDetails.HomeTeam" isHome="true"/>
        <div class="is-align-self-center">
            <h1 class="is-size-1 has-text-white">@matchDetails.HomeGoals - @matchDetails.AwayGoals</h1>
        </div>
        <TeamCard team="@matchDetails.AwayTeam" />
    </div>
    <h4 class="is-size-4 has-text-white mt-5">Ottelu pelattu @matchDetails.MatchDate.ToString("dd/MM/yyyy")</h4>
    @if (matchDetails.MatchEvents.Count != 0) {
        <table class="table is-striped is-fullwidth is-semitransparent mt-5 has-text-black">
            <thead>
                <tr>
                    <th class="has-text-centered">Tapahtumahetki</th>
                    <th class="has-text-centered">Tapahtuma</th>
                    <th>Kuvaus</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var matchEvent in matchDetails.MatchEvents) {
                    <tr>
                        <td class="has-text-centered">@(matchEvent.ElapsedSeconds / 60)'</td>
                        <td class="has-text-centered"><img src="@matchEvent.EventTypeIcon" /></td>
                        <td>@matchEvent.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
}

@code {
    [Parameter]
    public int matchId { get; set; }

    private IEnumerable<MatchesListing> matches = Array.Empty<MatchesListing>();
    private MatchesListing matchDetails;
    private bool getMatchError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync() {
        matches = await MatchesService.FetchData();
        if (matches.Count() != 0) {
            matchDetails = matches.Where(x => x.Id == matchId).ToArray()[0];
        }
        else {
            getMatchError = true;
        }
        shouldRender = true;
    }
}